# Origins Civics Generic Scripted Effects
# by cbshing
#	Example:
#
#	example_effect = { 
#		add_energy = -100
#	}
#
#	In a script file:
#
#	effect = {
#		example_effect = yes
#	}



# ########################
# #   Country Effects    #
# ########################

# give technology to construct gateways
# note this does not let you travel gateways, you need to use the other effect
# Scope: Country
origins_give_megaengineering_technology = {
	give_technology = { tech = "tech_mega_engineering" message = no }
}

# gives technology and ability to travel wormholes
# Scope: Country
origins_allow_country_to_travel_wormhole = {
	add_seen_bypass_type = wormhole
	set_country_flag = encountered_first_wormhole
	give_technology = { tech = "tech_wormhole_stabilization" message = no }
}

# give technology and ability to activate gateways
# Scope: Country
origins_allow_country_to_activate_gateway = {
	add_seen_bypass_type = gateway
	set_country_flag = encountered_first_gateway
	give_technology = { tech = "tech_gateway_activation" message = no }
}

# give technology to construct gateways
# note this does not let you travel gateways, you need to use the other effect
# Scope: Country
origins_allow_country_to_build_gateways = {
	origins_give_megaengineering_technology = yes
	give_technology = { tech = "tech_gateway_construction" message = no }
}

# give ascension theory technology
# Scope: Country
origins_give_ascension_theory_technology = {
	if = {
		limit = {
			NOT = { host_has_dlc = "Apocalypse" }
		}
		give_technology = { tech = "tech_ascension_theory" message = no }
	}
	else = {
		give_technology = { tech = "tech_ascension_theory_apoc" message = no }
	}
}

# makes capital planet homeworld
# use if capital planet is different from the game start planet
# Scope: Country
origins_make_current_capital_homeworld = {
	random_owned_planet = {
		limit = { is_capital = yes }
		this = { save_event_target_as = new_capital_homeworld }
	}
	random_owned_pop = {
		limit = { is_exact_same_species = owner_species }
		species = { 
			set_species_homeworld = event_target:new_capital_homeworld
		}
	}
}

# nuke other colonies gained from advanced empire, etc
# Scope: Country
origins_nuke_all_colonies = {
	every_owned_planet = {
		limit = { is_capital = no }
		every_tile = { 
			kill_pop = yes 
			remove_building = yes
		}
	}
}

# change species to have habitat preferences 
# Scope: Country
origins_give_species_habitat_preference = {
	every_owned_pop = {
		limit = { is_exact_same_species = owner_species }
		modify_species = {
			species = this
			ideal_planet_class = pc_habitat
			base = none # makes this replace parent species
		}
	}
	change_dominant_species = { species = last_created change_all = yes }
}

# change species to have tomb world preferences 
# Scope: Country
origins_give_species_tomb_world_preference = {
	every_owned_pop = {
		limit = { is_exact_same_species = owner_species }
		modify_species = {
			species = this
			ideal_planet_class = pc_nuked
			base = none # makes this replace parent species
		}
	}
	change_dominant_species = { species = last_created change_all = yes }
}

# change species to have continental preferences 
# Scope: Country
origins_give_species_continental_preference = {
	every_owned_pop = {
		limit = { is_exact_same_species = owner_species }
		modify_species = {
			species = this
			ideal_planet_class = pc_continental
			base = none # makes this replace parent species
		}
	}
	change_dominant_species = { species = last_created change_all = yes }
}


# change species to have Earth homeworld
# Scope: Country
make_earth_this_species_home = {
	#find Earth
	random_system = {
		limit = { has_star_flag = sol }
		#check for planet_earth flag
		if = { 
			limit = { any_planet = { has_planet_flag = planet_earth } } 
			random_system_planet = {
				limit = {
					has_planet_flag = planet_earth
				}
				save_event_target_as = origins_earth_home
				if = { limit = { has_owner = yes } 
					prevprev = { set_country_flag = earth_is_owned }
					owner = { 
						set_country_flag = origins_earth_owner
						set_country_flag = colony_home_empire
						owner_species = { save_event_target_as = origins_earth_owner }
					}
				}
			}
		}
		#for CoM Earth, Tomb Earth or other Earths without planet_flag
		else = {
			random_system_planet = {
				limit = {
					OR = {
						is_colonizable = yes
						is_homeworld = yes
					}
					is_asteroid = no
					is_star = no
				}
				save_event_target_as = origins_earth_home
				if = { limit = { has_owner = yes } 
					prevprev = { set_country_flag = earth_is_owned }
					owner = { 
						set_country_flag = origins_earth_owner
						set_country_flag = colony_home_empire
						owner_species = { save_event_target_as = origins_earth_owner }
					}
				}
			}
		}
	}
	random_owned_pop = {
		limit = { is_same_species = owner_species }
		species = {
			set_species_homeworld = event_target:origins_earth_home				
			if = { limit = { prevprev = { has_country_flag = earth_is_owned } }
				prevprev = { remove_country_flag = earth_is_owned  }
				set_species_identity = event_target:origins_earth_owner
			}
			save_event_target_as = earth_colony_species
		}
	}
	every_owned_pop = {
		limit = { is_same_species = owner_species }
		change_species = event_target:earth_colony_species
	}
	every_owned_leader = {
		limit = { is_same_species = owner_species }
		change_species = event_target:earth_colony_species
	}
	every_pool_leader = {
		limit = { is_same_species = owner_species }
		change_species = event_target:earth_colony_species
	}
	set_country_flag = country_homeworld_created 
	change_dominant_species = { species = event_target:earth_colony_species }	
}

# ########################
# #    Planet Effects    #
# ########################

# adds vanilla start tile blockers to planet
# Scope: Planet
origins_add_vanilla_tile_blockers = {
	#create tile blockers on research tiles
	while = {
		count = 3 
		random_tile = {
			limit = {
				AND = { 
					has_blocker = no
					has_building = no
					OR = {
						has_resource = {
							type = society_research
							amount = 1
						}
						has_resource = {
							type = physics_research
							amount = 1
						}
						has_resource = {
							type = engineering_research
							amount = 1
						}
					}
				}
			}
			set_blocker = "tb_failing_infrastructure"
		}
	}
	#create tile blockers on food/energy/mineral tiles
	while = {
		count = 3 
		random_tile = {
			limit = {
				AND = { 
					has_blocker = no
					has_building = no
					OR = {
						has_resource = {
							type = energy
							amount = 2
						}
						has_resource = {
							type = minerals
							amount = 2
						}
						has_resource = {
							type = food
							amount = 2
						}
					}
				}
			}
			set_blocker = "tb_decrepit_dwellings"
		}
	}
	
	planet_event = { id = game_start.14 }
}	

# adds vanilla start tile blockers to planet
# Scope: Planet
origins_remove_food_resources = {
	every_tile = {
		limit = {
			AND = {
				has_building = no
				OR = {
					has_resource = {
						type = food
						amount = 4
					}
					has_resource = {
						type = food
						amount = 3
					}
					has_resource = {
						type = food
						amount = 2
					}
					has_resource = {
						type = food
						amount = 1
					}
				}
			}
		}
		clear_deposits  = yes
	}
	random_tile = {
		limit = {
			AND = {
				has_building = yes
				OR = {
					has_resource = {
						type = food
						amount = 4
					}
					has_resource = {
						type = food
						amount = 3
					}
					has_resource = {
						type = food
						amount = 2
					}
					has_resource = {
						type = food
						amount = 1
					}
				}
			}
		}
		clear_deposits  = yes
		set_deposit = d_farmland_deposit	
	}
}

# Selectively resets necessary tiles for habitat users.
# Scope: Planet
origins_reset_start_buildings_and_blockers_habitat = { 
	# Set up a new capitol and nearby buildings
	random_tile = {
		limit = { has_blocker = no has_building = no num_adjacent_tiles > 3 }
		set_building = "building_hab_capital"
		set_deposit = d_energy_deposit	
		random_neighboring_tile = {
			limit = { has_blocker = no has_building = no }
			set_building = "building_hab_agri_bay"
			#set_deposit = d_rich_farmland_deposit						
		}
		random_neighboring_tile = {
			limit = { has_blocker = no has_building = no }
			set_building = "building_hab_agri_bay"
			#set_deposit = d_rich_farmland_deposit						
		}
		random_neighboring_tile = {
			limit = { has_blocker = no has_building = no }
			set_building = "building_hab_solar_power_processor"
			#set_deposit = d_rich_energy_deposit
		}
		random_neighboring_tile = {
			limit = { has_blocker = no has_building = no }
			set_building = "building_hab_astro_mining_facility"
			#set_deposit = d_rich_mineral_deposit
		}
	}
	# Create a random_blocker for the CGM mod compatability
	random_tile = {
		limit = { has_blocker = no has_building = no num_adjacent_tiles > 3 }
		set_blocker = "tb_failing_infrastructure"
	}
	# Add the lab
	random_tile = {
		limit = { has_blocker = no has_building = no }
		set_building = "building_hab_laboratory_module"
		random_list = {
			33 = {
				#set_deposit = d_engineering_deposit										
			}
			33 = { 
				#set_deposit = d_society_deposit											
			}
			33 = { 
				#set_deposit = d_physics_deposit											
			}					
		}	
	}
	# Add mine and power plant
	random_tile = {
		limit = { has_blocker = no has_building = no }
		set_building = "building_hab_astro_mining_facility"
		#set_deposit = d_mineral_deposit
	}
	random_tile = {
		limit = { has_blocker = no has_building = no }
		set_building = "building_hab_solar_power_processor"
		#set_deposit = d_rich_energy_deposit
	}
	# Add blockers
    random_tile = {
        limit = { has_blocker = no has_building = no has_pop = no }
        set_blocker = "tb_failing_infrastructure"
    }
   # random_tile = {
   #     limit = { has_blocker = no has_building = no has_pop = no }
   #     set_blocker = "tb_failing_infrastructure"
   # }
}

# Selectively resets necessary tiles for Machine World users.
# Scope: Planet
origins_reset_start_buildings_and_blockers_machine_world = { 
	# Find capitol and buildings, and then remove them
	# this is needed because planet's deposits were re-rolled after
	every_tile = {
		limit = { has_building = yes }
		remove_building = yes
	}
	# Set up a new capitol and nearby buildings
	random_tile = {
		limit = { has_blocker = no has_building = no num_adjacent_tiles > 3 }
		set_building = "building_machine_capital_1"
		set_deposit = d_energy_deposit	
		random_neighboring_tile = {
			limit = { has_blocker = no has_building = no }
			set_building = "building_power_plant_1"
			clear_deposits = yes						
		}
		random_neighboring_tile = {
			limit = { has_blocker = no has_building = no }
			set_building = "building_power_plant_1"
			clear_deposits = yes						
		}
		random_neighboring_tile = {
			limit = { has_blocker = no has_building = no }
			set_building = "building_power_plant_1"
			set_deposit = d_rich_energy_deposit
		}
		random_neighboring_tile = {
			limit = { has_blocker = no has_building = no }
			set_building = "building_mining_network_1"
			set_deposit = d_rich_mineral_deposit
		}
	}
	
	# Add the lab
	# has pop = yes to make sure they use the tiles that were first generated for this task
	random_tile = {
		limit = { has_blocker = no has_building = no has_pop = yes  }
		set_building = "building_basic_science_lab_1"
		random_list = {
			33 = {
				set_deposit = d_engineering_deposit										
			}
			33 = { 
				set_deposit = d_society_deposit											
			}
			33 = { 
				set_deposit = d_physics_deposit											
			}					
		}	
	}
	# Add mine and power plant
	# has pop = yes to make sure they use the tiles that were first generated for this task
	random_tile = {
		limit = { has_blocker = no has_building = no has_pop = yes }
		set_building = "building_mining_network_1"
		set_deposit = d_mineral_deposit
	}
	random_tile = {
		limit = { has_blocker = no has_building = no has_pop = yes  }
		set_building = "building_power_plant_1"
		set_deposit = d_rich_energy_deposit
	}
	
	# Move pops to tiles
	every_tile = {
		limit = { has_building = yes has_pop = no }
		
		save_event_target_as = needs_worker	
		planet = {
			random_pop = {
				limit = { tile = { has_building = no } }

				resettle_pop = {
					pop = this
					tile = event_target:needs_worker
				}
			
			}		
		}
	}
	# Add blockers
	random_tile = {
        limit = { has_blocker = no has_building = no has_pop = no }
        set_blocker = "tb_failing_infrastructure"
        set_deposit = d_rich_energy_deposit
    }
    random_tile = {
        limit = { has_blocker = no has_building = no has_pop = no }
        set_blocker = "tb_failing_infrastructure"
        set_deposit = d_engineering_deposit
    }
    random_tile = {
        limit = { has_blocker = no has_building = no has_pop = no  }
        set_blocker = "tb_failing_infrastructure"
        set_deposit = d_society_deposit
    }
    random_tile = {
        limit = { has_blocker = no has_building = no has_pop = no }
        set_blocker = "tb_failing_infrastructure"
        set_deposit = d_physics_deposit
    }
}

# ########################
# # Solar System Effects #
# ########################

### Hyperlanes ###
# remove hyperlane to random neighbor stars
# Scope: Solar System
origins_remove_random_hyperlanes_to_neighbors = {
	this = { save_event_target_as = hyperlane_to_star }
	random_neighbor_system = {
		ignore_hyperlanes = no
		remove_hyperlane = { from = this to = event_target:hyperlane_to_star  }
	}
}

# adds hyperlane to random neighbor stars
# Scope: Solar System
origins_add_hyperlane_to_random_neighbors = {
	this = { save_event_target_as = hyperlane_to_star }
	random_neighbor_system = {
		ignore_hyperlanes = yes
		limit = { NOT = { has_hyperlane_to = event_target:hyperlane_to_star } }
		add_hyperlane = { from = this to = event_target:hyperlane_to_star  }
	}
}

# remove every hyperlane to neighbor stars
# Scope: Solar System
origins_remove_all_hyperlanes_to_neighbors = {
	this = { save_event_target_as = hyperlane_to_star }
	every_neighbor_system  = {
		ignore_hyperlanes = no
		remove_hyperlane = { from = this to = event_target:hyperlane_to_star  }
	}
}

### Wormholes ###
# spawns wormhole to a random star at least Eucledian distance 50 away and max distance 200
# Scope: Solar System
origins_spawn_natural_wormhole = {
	set_star_flag = has_wormhole
	random_system = {
		limit = { 
			NOT = { has_natural_wormhole = yes } 
			distance = {
				source = prev
				min_distance >= 50
				max_distance <= 200
			}
		}
		prev = { # done this way to ensure we don't spawn "orphan" wormholes (wormholes that aren't linked to anything)		
			spawn_natural_wormhole = {
				bypass_type = wormhole
				random_pos = yes
				orbit_angle = 360
			}
		}
		spawn_natural_wormhole = {
			bypass_type = wormhole
			random_pos = yes
			orbit_angle = 360
		}
		link_wormholes = prev
	}
}

### Gateways ###
# spawns deactivated gateway
# Scope: Solar System
origins_spawn_deactivated_gateway = {
	spawn_megastructure = {
		type = gateway_ruined
		random_pos = yes
		orbit_angle = 360
	}
}

# activate random gateway
# Scope: Any
origins_activate_random_gateway = {
	random_megastructure = {
		limit = { is_megastructure_type = gateway_ruined }
		upgrade_megastructure_to = gateway_restored
		finish_upgrade = yes
	}
}

# spawns under construction gateway with owner
# Scope: Solar System
# root: Country
origins_spawn_gateway_under_construction = {
	spawn_megastructure = {
		type = gateway_0
		random_pos = yes
		orbit_angle = 360
		owner = root
	}
}

# spawns completed gateway with owner
# Scope: Solar System
# root: Country
origins_spawn_gateway_completed = {
	spawn_megastructure = {
		type = gateway_final
		random_pos = yes
		orbit_angle = 360
		owner = root
	}
}

### Megastructures ###
# spawns habitat over owner's capital
# Scope: Solar System
# root: Country
origins_spawn_habitat_over_capital = {
	random_owned_planet = {
		limit = { is_capital = yes }
		save_event_target_as = habitat_capital_planet
		owner.capital_scope.solar_system = {
			spawn_megastructure = {
				type = habitat_0
				location = event_target:habitat_capital_planet
				owner = root
			}
		}
	}
}

# spawns habitat over owner's capital
# Scope: Solar System
origins_spawn_random_habitat_in_system = {
	random_system_planet  = {
		limit = { 
			NOR = {
				has_planet_flag = megastructure
				has_planet_flag = has_megastructure
				solar_system = {
					has_star_flag = ring_world_built
				}
				is_planet_class = pc_ringworld_habitable
				is_planet_class = pc_ringworld_habitable_damaged
				is_planet_class = pc_ringworld_tech
				is_planet_class = pc_ringworld_tech_damaged
				is_planet_class = pc_ringworld_seam
				is_planet_class = pc_ringworld_seam_damaged
				is_planet_class = pc_habitat
			}
		}
		save_event_target_as = habitat_planet
		prev = {
			spawn_megastructure = {
				type = habitat_0
				location = event_target:habitat_planet
				#owner = root
			}
		}
	}
}
